-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Interface.TermNode exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)


type alias Fragments decodesTo =
    {
    onCategory : SelectionSet decodesTo Taco.Object.Category,
 onPostFormat : SelectionSet decodesTo Taco.Object.PostFormat,
 onTag : SelectionSet decodesTo Taco.Object.Tag
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo Taco.Interface.TermNode
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "Category" selections____.onCategory,
 Object.buildFragment "PostFormat" selections____.onPostFormat,
 Object.buildFragment "Tag" selections____.onTag
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onCategory = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onPostFormat = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onTag = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
{-| The number of objects connected to the object
-}
count : SelectionSet (Maybe Int) Taco.Interface.TermNode
count =
      Object.selectionForField "(Maybe Int)" "count" [] (Decode.int |> Decode.nullable)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet Int Taco.Interface.TermNode
databaseId =
      Object.selectionForField "Int" "databaseId" [] (Decode.int)


{-| The description of the object
-}
description : SelectionSet (Maybe String) Taco.Interface.TermNode
description =
      Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


type alias EnqueuedScriptsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the TermNode type and the EnqueuedScript type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedScripts : (EnqueuedScriptsOptionalArguments -> EnqueuedScriptsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.TermNodeToEnqueuedScriptConnection
 -> SelectionSet (Maybe decodesTo) Taco.Interface.TermNode
enqueuedScripts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedScripts" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias EnqueuedStylesheetsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the TermNode type and the EnqueuedStylesheet type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedStylesheets : (EnqueuedStylesheetsOptionalArguments -> EnqueuedStylesheetsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.TermNodeToEnqueuedStylesheetConnection
 -> SelectionSet (Maybe decodesTo) Taco.Interface.TermNode
enqueuedStylesheets fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedStylesheets" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| Unique identifier for the term
-}
id : SelectionSet Taco.ScalarCodecs.Id Taco.Interface.TermNode
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether the object is restricted from the current viewer
-}
isRestricted : SelectionSet (Maybe Bool) Taco.Interface.TermNode
isRestricted =
      Object.selectionForField "(Maybe Bool)" "isRestricted" [] (Decode.bool |> Decode.nullable)


{-| The link to the term
-}
link : SelectionSet (Maybe String) Taco.Interface.TermNode
link =
      Object.selectionForField "(Maybe String)" "link" [] (Decode.string |> Decode.nullable)


{-| The human friendly name of the object.
-}
name : SelectionSet (Maybe String) Taco.Interface.TermNode
name =
      Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| An alphanumeric identifier for the object unique to its type.
-}
slug : SelectionSet (Maybe String) Taco.Interface.TermNode
slug =
      Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)


{-| The ID of the term group that this term object belongs to
-}
termGroupId : SelectionSet (Maybe Int) Taco.Interface.TermNode
termGroupId =
      Object.selectionForField "(Maybe Int)" "termGroupId" [] (Decode.int |> Decode.nullable)


{-| The taxonomy ID that the object is associated with
-}
termTaxonomyId : SelectionSet (Maybe Int) Taco.Interface.TermNode
termTaxonomyId =
      Object.selectionForField "(Maybe Int)" "termTaxonomyId" [] (Decode.int |> Decode.nullable)


{-| The unique resource identifier path
-}
uri : SelectionSet String Taco.Interface.TermNode
uri =
      Object.selectionForField "String" "uri" [] (Decode.string)
