-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Interface.HierarchicalContentNode exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)


type alias Fragments decodesTo =
    {
    onMediaItem : SelectionSet decodesTo Taco.Object.MediaItem,
 onPage : SelectionSet decodesTo Taco.Object.Page
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo Taco.Interface.HierarchicalContentNode
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "MediaItem" selections____.onMediaItem,
 Object.buildFragment "Page" selections____.onPage
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onMediaItem = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onPage = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
type alias AncestorsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs }

{-| Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
ancestors : (AncestorsOptionalArguments -> AncestorsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.HierarchicalContentNodeToContentNodeAncestorsConnection
 -> SelectionSet (Maybe decodesTo) Taco.Interface.HierarchicalContentNode
ancestors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "ancestors" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ChildrenOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs }

{-| Connection between the HierarchicalContentNode type and the ContentNode type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
children : (ChildrenOptionalArguments -> ChildrenOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.HierarchicalContentNodeToContentNodeChildrenConnection
 -> SelectionSet (Maybe decodesTo) Taco.Interface.HierarchicalContentNode
children fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "children" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The parent of the node. The parent object can be of various types
-}
parent : SelectionSet decodesTo Taco.Object.HierarchicalContentNodeToParentContentNodeConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Interface.HierarchicalContentNode
parent object____ =
      Object.selectionForCompositeField "parent" [] (object____) (identity >> Decode.nullable)


{-| Database id of the parent node
-}
parentDatabaseId : SelectionSet (Maybe Int) Taco.Interface.HierarchicalContentNode
parentDatabaseId =
      Object.selectionForField "(Maybe Int)" "parentDatabaseId" [] (Decode.int |> Decode.nullable)


{-| The globally unique identifier of the parent node.
-}
parentId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Interface.HierarchicalContentNode
parentId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "parentId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)
