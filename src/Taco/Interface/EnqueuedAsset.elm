-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Interface.EnqueuedAsset exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)


type alias Fragments decodesTo =
    {
    onEnqueuedScript : SelectionSet decodesTo Taco.Object.EnqueuedScript,
 onEnqueuedStylesheet : SelectionSet decodesTo Taco.Object.EnqueuedStylesheet
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
      Fragments decodesTo
      -> SelectionSet decodesTo Taco.Interface.EnqueuedAsset
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [
         Object.buildFragment "EnqueuedScript" selections____.onEnqueuedScript,
 Object.buildFragment "EnqueuedStylesheet" selections____.onEnqueuedStylesheet
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    {
      onEnqueuedScript = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing),
 onEnqueuedStylesheet = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
{-| @todo
-}
args : SelectionSet (Maybe Bool) Taco.Interface.EnqueuedAsset
args =
      Object.selectionForField "(Maybe Bool)" "args" [] (Decode.bool |> Decode.nullable)


{-| Dependencies needed to use this asset
-}
dependencies : SelectionSet decodesTo Taco.Object.EnqueuedScript
 -> SelectionSet (Maybe (List (Maybe decodesTo))) Taco.Interface.EnqueuedAsset
dependencies object____ =
      Object.selectionForCompositeField "dependencies" [] (object____) (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


{-| Extra information needed for the script
-}
extra : SelectionSet (Maybe String) Taco.Interface.EnqueuedAsset
extra =
      Object.selectionForField "(Maybe String)" "extra" [] (Decode.string |> Decode.nullable)


{-| The handle of the enqueued asset
-}
handle : SelectionSet (Maybe String) Taco.Interface.EnqueuedAsset
handle =
      Object.selectionForField "(Maybe String)" "handle" [] (Decode.string |> Decode.nullable)


{-| The ID of the enqueued asset
-}
id : SelectionSet Taco.ScalarCodecs.Id Taco.Interface.EnqueuedAsset
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The source of the asset
-}
src : SelectionSet (Maybe String) Taco.Interface.EnqueuedAsset
src =
      Object.selectionForField "(Maybe String)" "src" [] (Decode.string |> Decode.nullable)


{-| The version of the enqueued asset
-}
version : SelectionSet (Maybe String) Taco.Interface.EnqueuedAsset
version =
      Object.selectionForField "(Maybe String)" "version" [] (Decode.string |> Decode.nullable)
