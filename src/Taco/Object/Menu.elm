-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Object.Menu exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import Taco.Enum.MenuLocationEnum
{-| The number of items in the menu
-}
count : SelectionSet (Maybe Int) Taco.Object.Menu
count =
      Object.selectionForField "(Maybe Int)" "count" [] (Decode.int |> Decode.nullable)


{-| The unique identifier stored in the database
-}
databaseId : SelectionSet Int Taco.Object.Menu
databaseId =
      Object.selectionForField "Int" "databaseId" [] (Decode.int)


{-| The globally unique identifier of the nav menu object.
-}
id : SelectionSet Taco.ScalarCodecs.Id Taco.Object.Menu
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether the object is restricted from the current viewer
-}
isRestricted : SelectionSet (Maybe Bool) Taco.Object.Menu
isRestricted =
      Object.selectionForField "(Maybe Bool)" "isRestricted" [] (Decode.bool |> Decode.nullable)


{-| 
-}
locations : SelectionSet (Maybe (List (Maybe Taco.Enum.MenuLocationEnum.MenuLocationEnum))) Taco.Object.Menu
locations =
      Object.selectionForField "(Maybe (List (Maybe Enum.MenuLocationEnum.MenuLocationEnum)))" "locations" [] (Taco.Enum.MenuLocationEnum.decoder |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| WP ID of the nav menu.
-}
menuId : SelectionSet (Maybe Int) Taco.Object.Menu
menuId =
      Object.selectionForField "(Maybe Int)" "menuId" [] (Decode.int |> Decode.nullable)


type alias MenuItemsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.MenuToMenuItemConnectionWhereArgs }

{-| Connection between the Menu type and the MenuItem type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
menuItems : (MenuItemsOptionalArguments -> MenuItemsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.MenuToMenuItemConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Menu
menuItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeMenuToMenuItemConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "menuItems" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| Display name of the menu. Equivalent to WP_Term-&gt;name.
-}
name : SelectionSet (Maybe String) Taco.Object.Menu
name =
      Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| The url friendly name of the menu. Equivalent to WP_Term-&gt;slug
-}
slug : SelectionSet (Maybe String) Taco.Object.Menu
slug =
      Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)
