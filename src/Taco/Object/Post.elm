-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Object.Post exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import Taco.Enum.PostObjectFieldFormatEnum
import Taco.Enum.PostObjectFieldFormatEnum
import Taco.Enum.PostObjectFieldFormatEnum
{-| Connection between the NodeWithAuthor type and the User type
-}
author : SelectionSet decodesTo Taco.Object.NodeWithAuthorToUserConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
author object____ =
      Object.selectionForCompositeField "author" [] (object____) (identity >> Decode.nullable)


{-| The database identifier of the author of the node
-}
authorDatabaseId : SelectionSet (Maybe Int) Taco.Object.Post
authorDatabaseId =
      Object.selectionForField "(Maybe Int)" "authorDatabaseId" [] (Decode.int |> Decode.nullable)


{-| The globally unique identifier of the author of the node
-}
authorId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Post
authorId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "authorId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


type alias CategoriesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PostToCategoryConnectionWhereArgs }

{-| Connection between the post type and the category type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
categories : (CategoriesOptionalArguments -> CategoriesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PostToCategoryConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
categories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePostToCategoryConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "categories" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
-}
commentCount : SelectionSet (Maybe Int) Taco.Object.Post
commentCount =
      Object.selectionForField "(Maybe Int)" "commentCount" [] (Decode.int |> Decode.nullable)


{-| Whether the comments are open or closed for this particular post.
-}
commentStatus : SelectionSet (Maybe String) Taco.Object.Post
commentStatus =
      Object.selectionForField "(Maybe String)" "commentStatus" [] (Decode.string |> Decode.nullable)


type alias CommentsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PostToCommentConnectionWhereArgs }

{-| Connection between the post type and the Comment type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
comments : (CommentsOptionalArguments -> CommentsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PostToCommentConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePostToCommentConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "comments" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ContentOptionalArguments = { format : OptionalArgument Taco.Enum.PostObjectFieldFormatEnum.PostObjectFieldFormatEnum }

{-| The content of the post.

  - format - Format of the field output

-}
content : (ContentOptionalArguments -> ContentOptionalArguments)
 -> SelectionSet (Maybe String) Taco.Object.Post
content fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { format = Absent }

        optionalArgs____ =
            [ Argument.optional "format" filledInOptionals____.format ((Encode.enum Taco.Enum.PostObjectFieldFormatEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForField "(Maybe String)" "content" optionalArgs____ (Decode.string |> Decode.nullable)


{-| Connection between the ContentNode type and the ContentType type
-}
contentType : SelectionSet decodesTo Taco.Object.ContentNodeToContentTypeConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
contentType object____ =
      Object.selectionForCompositeField "contentType" [] (object____) (identity >> Decode.nullable)


{-| The ID of the node in the database.
-}
databaseId : SelectionSet Int Taco.Object.Post
databaseId =
      Object.selectionForField "Int" "databaseId" [] (Decode.int)


{-| Post publishing date.
-}
date : SelectionSet (Maybe String) Taco.Object.Post
date =
      Object.selectionForField "(Maybe String)" "date" [] (Decode.string |> Decode.nullable)


{-| The publishing date set in GMT.
-}
dateGmt : SelectionSet (Maybe String) Taco.Object.Post
dateGmt =
      Object.selectionForField "(Maybe String)" "dateGmt" [] (Decode.string |> Decode.nullable)


{-| The desired slug of the post
-}
desiredSlug : SelectionSet (Maybe String) Taco.Object.Post
desiredSlug =
      Object.selectionForField "(Maybe String)" "desiredSlug" [] (Decode.string |> Decode.nullable)


{-| If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
-}
editingLockedBy : SelectionSet decodesTo Taco.Object.ContentNodeToEditLockConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
editingLockedBy object____ =
      Object.selectionForCompositeField "editingLockedBy" [] (object____) (identity >> Decode.nullable)


{-| The RSS enclosure for the object
-}
enclosure : SelectionSet (Maybe String) Taco.Object.Post
enclosure =
      Object.selectionForField "(Maybe String)" "enclosure" [] (Decode.string |> Decode.nullable)


type alias EnqueuedScriptsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the ContentNode type and the EnqueuedScript type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedScripts : (EnqueuedScriptsOptionalArguments -> EnqueuedScriptsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.ContentNodeToEnqueuedScriptConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
enqueuedScripts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedScripts" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias EnqueuedStylesheetsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the ContentNode type and the EnqueuedStylesheet type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedStylesheets : (EnqueuedStylesheetsOptionalArguments -> EnqueuedStylesheetsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.ContentNodeToEnqueuedStylesheetConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
enqueuedStylesheets fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedStylesheets" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ExcerptOptionalArguments = { format : OptionalArgument Taco.Enum.PostObjectFieldFormatEnum.PostObjectFieldFormatEnum }

{-| The excerpt of the post.

  - format - Format of the field output

-}
excerpt : (ExcerptOptionalArguments -> ExcerptOptionalArguments)
 -> SelectionSet (Maybe String) Taco.Object.Post
excerpt fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { format = Absent }

        optionalArgs____ =
            [ Argument.optional "format" filledInOptionals____.format ((Encode.enum Taco.Enum.PostObjectFieldFormatEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForField "(Maybe String)" "excerpt" optionalArgs____ (Decode.string |> Decode.nullable)


{-| Connection between the NodeWithFeaturedImage type and the MediaItem type
-}
featuredImage : SelectionSet decodesTo Taco.Object.NodeWithFeaturedImageToMediaItemConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
featuredImage object____ =
      Object.selectionForCompositeField "featuredImage" [] (object____) (identity >> Decode.nullable)


{-| The database identifier for the featured image node assigned to the content node
-}
featuredImageDatabaseId : SelectionSet (Maybe Int) Taco.Object.Post
featuredImageDatabaseId =
      Object.selectionForField "(Maybe Int)" "featuredImageDatabaseId" [] (Decode.int |> Decode.nullable)


{-| Globally unique ID of the featured image assigned to the node
-}
featuredImageId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Post
featuredImageId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "featuredImageId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


{-| The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
-}
guid : SelectionSet (Maybe String) Taco.Object.Post
guid =
      Object.selectionForField "(Maybe String)" "guid" [] (Decode.string |> Decode.nullable)


{-| The globally unique identifier of the post object.
-}
id : SelectionSet Taco.ScalarCodecs.Id Taco.Object.Post
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether the object is a node in the preview state
-}
isPreview : SelectionSet (Maybe Bool) Taco.Object.Post
isPreview =
      Object.selectionForField "(Maybe Bool)" "isPreview" [] (Decode.bool |> Decode.nullable)


{-| Whether the object is restricted from the current viewer
-}
isRestricted : SelectionSet (Maybe Bool) Taco.Object.Post
isRestricted =
      Object.selectionForField "(Maybe Bool)" "isRestricted" [] (Decode.bool |> Decode.nullable)


{-| True if the node is a revision of another node
-}
isRevision : SelectionSet (Maybe Bool) Taco.Object.Post
isRevision =
      Object.selectionForField "(Maybe Bool)" "isRevision" [] (Decode.bool |> Decode.nullable)


{-| Whether this page is sticky
-}
isSticky : SelectionSet Bool Taco.Object.Post
isSticky =
      Object.selectionForField "Bool" "isSticky" [] (Decode.bool)


{-| The user that most recently edited the node
-}
lastEditedBy : SelectionSet decodesTo Taco.Object.ContentNodeToEditLastConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
lastEditedBy object____ =
      Object.selectionForCompositeField "lastEditedBy" [] (object____) (identity >> Decode.nullable)


{-| The permalink of the post
-}
link : SelectionSet (Maybe String) Taco.Object.Post
link =
      Object.selectionForField "(Maybe String)" "link" [] (Decode.string |> Decode.nullable)


{-| The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
-}
modified : SelectionSet (Maybe String) Taco.Object.Post
modified =
      Object.selectionForField "(Maybe String)" "modified" [] (Decode.string |> Decode.nullable)


{-| The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
-}
modifiedGmt : SelectionSet (Maybe String) Taco.Object.Post
modifiedGmt =
      Object.selectionForField "(Maybe String)" "modifiedGmt" [] (Decode.string |> Decode.nullable)


{-| Whether the pings are open or closed for this particular post.
-}
pingStatus : SelectionSet (Maybe String) Taco.Object.Post
pingStatus =
      Object.selectionForField "(Maybe String)" "pingStatus" [] (Decode.string |> Decode.nullable)


{-| URLs that have been pinged.
-}
pinged : SelectionSet (Maybe (List (Maybe String))) Taco.Object.Post
pinged =
      Object.selectionForField "(Maybe (List (Maybe String)))" "pinged" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


type alias PostFormatsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PostToPostFormatConnectionWhereArgs }

{-| Connection between the post type and the postFormat type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
postFormats : (PostFormatsOptionalArguments -> PostFormatsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PostToPostFormatConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
postFormats fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePostToPostFormatConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "postFormats" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The id field matches the WP_Post-&gt;ID field.
-}
postId : SelectionSet Int Taco.Object.Post
postId =
      Object.selectionForField "Int" "postId" [] (Decode.int)


{-| Connection between the post type and the post type
-}
preview : SelectionSet decodesTo Taco.Object.PostToPreviewConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
preview object____ =
      Object.selectionForCompositeField "preview" [] (object____) (identity >> Decode.nullable)


{-| The database id of the preview node
-}
previewRevisionDatabaseId : SelectionSet (Maybe Int) Taco.Object.Post
previewRevisionDatabaseId =
      Object.selectionForField "(Maybe Int)" "previewRevisionDatabaseId" [] (Decode.int |> Decode.nullable)


{-| Whether the object is a node in the preview state
-}
previewRevisionId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Post
previewRevisionId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "previewRevisionId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


{-| If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
-}
revisionOf : SelectionSet decodesTo Taco.Object.NodeWithRevisionsToContentNodeConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
revisionOf object____ =
      Object.selectionForCompositeField "revisionOf" [] (object____) (identity >> Decode.nullable)


type alias RevisionsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PostToRevisionConnectionWhereArgs }

{-| Connection between the post type and the post type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
revisions : (RevisionsOptionalArguments -> RevisionsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PostToRevisionConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
revisions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePostToRevisionConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "revisions" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
-}
slug : SelectionSet (Maybe String) Taco.Object.Post
slug =
      Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)


{-| The current status of the object
-}
status : SelectionSet (Maybe String) Taco.Object.Post
status =
      Object.selectionForField "(Maybe String)" "status" [] (Decode.string |> Decode.nullable)


type alias TagsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PostToTagConnectionWhereArgs }

{-| Connection between the post type and the tag type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
tags : (TagsOptionalArguments -> TagsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PostToTagConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
tags fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePostToTagConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "tags" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The template assigned to a node of content
-}
template : SelectionSet decodesTo Taco.Interface.ContentTemplate
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
template object____ =
      Object.selectionForCompositeField "template" [] (object____) (identity >> Decode.nullable)


type alias TermsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PostToTermNodeConnectionWhereArgs }

{-| Connection between the post type and the TermNode type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
terms : (TermsOptionalArguments -> TermsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PostToTermNodeConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Post
terms fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePostToTermNodeConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "terms" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias TitleOptionalArguments = { format : OptionalArgument Taco.Enum.PostObjectFieldFormatEnum.PostObjectFieldFormatEnum }

{-| The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.

  - format - Format of the field output

-}
title : (TitleOptionalArguments -> TitleOptionalArguments)
 -> SelectionSet (Maybe String) Taco.Object.Post
title fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { format = Absent }

        optionalArgs____ =
            [ Argument.optional "format" filledInOptionals____.format ((Encode.enum Taco.Enum.PostObjectFieldFormatEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForField "(Maybe String)" "title" optionalArgs____ (Decode.string |> Decode.nullable)


{-| URLs queued to be pinged.
-}
toPing : SelectionSet (Maybe (List (Maybe String))) Taco.Object.Post
toPing =
      Object.selectionForField "(Maybe (List (Maybe String)))" "toPing" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| URI path for the resource
-}
uri : SelectionSet String Taco.Object.Post
uri =
      Object.selectionForField "String" "uri" [] (Decode.string)
