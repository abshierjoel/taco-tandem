-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Object.Page exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import Taco.Enum.PostObjectFieldFormatEnum
import Taco.Enum.PostObjectFieldFormatEnum
type alias AncestorsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs }

{-| Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
ancestors : (AncestorsOptionalArguments -> AncestorsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.HierarchicalContentNodeToContentNodeAncestorsConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
ancestors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "ancestors" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| Connection between the NodeWithAuthor type and the User type
-}
author : SelectionSet decodesTo Taco.Object.NodeWithAuthorToUserConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
author object____ =
      Object.selectionForCompositeField "author" [] (object____) (identity >> Decode.nullable)


{-| The database identifier of the author of the node
-}
authorDatabaseId : SelectionSet (Maybe Int) Taco.Object.Page
authorDatabaseId =
      Object.selectionForField "(Maybe Int)" "authorDatabaseId" [] (Decode.int |> Decode.nullable)


{-| The globally unique identifier of the author of the node
-}
authorId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Page
authorId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "authorId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


type alias ChildrenOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs }

{-| Connection between the HierarchicalContentNode type and the ContentNode type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
children : (ChildrenOptionalArguments -> ChildrenOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.HierarchicalContentNodeToContentNodeChildrenConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
children fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "children" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
-}
commentCount : SelectionSet (Maybe Int) Taco.Object.Page
commentCount =
      Object.selectionForField "(Maybe Int)" "commentCount" [] (Decode.int |> Decode.nullable)


{-| Whether the comments are open or closed for this particular post.
-}
commentStatus : SelectionSet (Maybe String) Taco.Object.Page
commentStatus =
      Object.selectionForField "(Maybe String)" "commentStatus" [] (Decode.string |> Decode.nullable)


type alias CommentsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PageToCommentConnectionWhereArgs }

{-| Connection between the page type and the Comment type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
comments : (CommentsOptionalArguments -> CommentsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PageToCommentConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePageToCommentConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "comments" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ContentOptionalArguments = { format : OptionalArgument Taco.Enum.PostObjectFieldFormatEnum.PostObjectFieldFormatEnum }

{-| The content of the post.

  - format - Format of the field output

-}
content : (ContentOptionalArguments -> ContentOptionalArguments)
 -> SelectionSet (Maybe String) Taco.Object.Page
content fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { format = Absent }

        optionalArgs____ =
            [ Argument.optional "format" filledInOptionals____.format ((Encode.enum Taco.Enum.PostObjectFieldFormatEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForField "(Maybe String)" "content" optionalArgs____ (Decode.string |> Decode.nullable)


{-| Connection between the ContentNode type and the ContentType type
-}
contentType : SelectionSet decodesTo Taco.Object.ContentNodeToContentTypeConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
contentType object____ =
      Object.selectionForCompositeField "contentType" [] (object____) (identity >> Decode.nullable)


{-| The ID of the node in the database.
-}
databaseId : SelectionSet Int Taco.Object.Page
databaseId =
      Object.selectionForField "Int" "databaseId" [] (Decode.int)


{-| Post publishing date.
-}
date : SelectionSet (Maybe String) Taco.Object.Page
date =
      Object.selectionForField "(Maybe String)" "date" [] (Decode.string |> Decode.nullable)


{-| The publishing date set in GMT.
-}
dateGmt : SelectionSet (Maybe String) Taco.Object.Page
dateGmt =
      Object.selectionForField "(Maybe String)" "dateGmt" [] (Decode.string |> Decode.nullable)


{-| The desired slug of the post
-}
desiredSlug : SelectionSet (Maybe String) Taco.Object.Page
desiredSlug =
      Object.selectionForField "(Maybe String)" "desiredSlug" [] (Decode.string |> Decode.nullable)


{-| If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
-}
editingLockedBy : SelectionSet decodesTo Taco.Object.ContentNodeToEditLockConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
editingLockedBy object____ =
      Object.selectionForCompositeField "editingLockedBy" [] (object____) (identity >> Decode.nullable)


{-| The RSS enclosure for the object
-}
enclosure : SelectionSet (Maybe String) Taco.Object.Page
enclosure =
      Object.selectionForField "(Maybe String)" "enclosure" [] (Decode.string |> Decode.nullable)


type alias EnqueuedScriptsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the ContentNode type and the EnqueuedScript type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedScripts : (EnqueuedScriptsOptionalArguments -> EnqueuedScriptsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.ContentNodeToEnqueuedScriptConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
enqueuedScripts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedScripts" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias EnqueuedStylesheetsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the ContentNode type and the EnqueuedStylesheet type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedStylesheets : (EnqueuedStylesheetsOptionalArguments -> EnqueuedStylesheetsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.ContentNodeToEnqueuedStylesheetConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
enqueuedStylesheets fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedStylesheets" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| Connection between the NodeWithFeaturedImage type and the MediaItem type
-}
featuredImage : SelectionSet decodesTo Taco.Object.NodeWithFeaturedImageToMediaItemConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
featuredImage object____ =
      Object.selectionForCompositeField "featuredImage" [] (object____) (identity >> Decode.nullable)


{-| The database identifier for the featured image node assigned to the content node
-}
featuredImageDatabaseId : SelectionSet (Maybe Int) Taco.Object.Page
featuredImageDatabaseId =
      Object.selectionForField "(Maybe Int)" "featuredImageDatabaseId" [] (Decode.int |> Decode.nullable)


{-| Globally unique ID of the featured image assigned to the node
-}
featuredImageId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Page
featuredImageId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "featuredImageId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


{-| The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
-}
guid : SelectionSet (Maybe String) Taco.Object.Page
guid =
      Object.selectionForField "(Maybe String)" "guid" [] (Decode.string |> Decode.nullable)


{-| The globally unique identifier of the page object.
-}
id : SelectionSet Taco.ScalarCodecs.Id Taco.Object.Page
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether this page is set to the static front page.
-}
isFrontPage : SelectionSet Bool Taco.Object.Page
isFrontPage =
      Object.selectionForField "Bool" "isFrontPage" [] (Decode.bool)


{-| Whether this page is set to the blog posts page.
-}
isPostsPage : SelectionSet Bool Taco.Object.Page
isPostsPage =
      Object.selectionForField "Bool" "isPostsPage" [] (Decode.bool)


{-| Whether the object is a node in the preview state
-}
isPreview : SelectionSet (Maybe Bool) Taco.Object.Page
isPreview =
      Object.selectionForField "(Maybe Bool)" "isPreview" [] (Decode.bool |> Decode.nullable)


{-| Whether the object is restricted from the current viewer
-}
isRestricted : SelectionSet (Maybe Bool) Taco.Object.Page
isRestricted =
      Object.selectionForField "(Maybe Bool)" "isRestricted" [] (Decode.bool |> Decode.nullable)


{-| True if the node is a revision of another node
-}
isRevision : SelectionSet (Maybe Bool) Taco.Object.Page
isRevision =
      Object.selectionForField "(Maybe Bool)" "isRevision" [] (Decode.bool |> Decode.nullable)


{-| The user that most recently edited the node
-}
lastEditedBy : SelectionSet decodesTo Taco.Object.ContentNodeToEditLastConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
lastEditedBy object____ =
      Object.selectionForCompositeField "lastEditedBy" [] (object____) (identity >> Decode.nullable)


{-| The permalink of the post
-}
link : SelectionSet (Maybe String) Taco.Object.Page
link =
      Object.selectionForField "(Maybe String)" "link" [] (Decode.string |> Decode.nullable)


{-| A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
-}
menuOrder : SelectionSet (Maybe Int) Taco.Object.Page
menuOrder =
      Object.selectionForField "(Maybe Int)" "menuOrder" [] (Decode.int |> Decode.nullable)


{-| The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
-}
modified : SelectionSet (Maybe String) Taco.Object.Page
modified =
      Object.selectionForField "(Maybe String)" "modified" [] (Decode.string |> Decode.nullable)


{-| The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
-}
modifiedGmt : SelectionSet (Maybe String) Taco.Object.Page
modifiedGmt =
      Object.selectionForField "(Maybe String)" "modifiedGmt" [] (Decode.string |> Decode.nullable)


{-| The id field matches the WP_Post-&gt;ID field.
-}
pageId : SelectionSet Int Taco.Object.Page
pageId =
      Object.selectionForField "Int" "pageId" [] (Decode.int)


{-| The parent of the node. The parent object can be of various types
-}
parent : SelectionSet decodesTo Taco.Object.HierarchicalContentNodeToParentContentNodeConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
parent object____ =
      Object.selectionForCompositeField "parent" [] (object____) (identity >> Decode.nullable)


{-| Database id of the parent node
-}
parentDatabaseId : SelectionSet (Maybe Int) Taco.Object.Page
parentDatabaseId =
      Object.selectionForField "(Maybe Int)" "parentDatabaseId" [] (Decode.int |> Decode.nullable)


{-| The globally unique identifier of the parent node.
-}
parentId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Page
parentId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "parentId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


{-| Connection between the page type and the page type
-}
preview : SelectionSet decodesTo Taco.Object.PageToPreviewConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
preview object____ =
      Object.selectionForCompositeField "preview" [] (object____) (identity >> Decode.nullable)


{-| The database id of the preview node
-}
previewRevisionDatabaseId : SelectionSet (Maybe Int) Taco.Object.Page
previewRevisionDatabaseId =
      Object.selectionForField "(Maybe Int)" "previewRevisionDatabaseId" [] (Decode.int |> Decode.nullable)


{-| Whether the object is a node in the preview state
-}
previewRevisionId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Page
previewRevisionId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "previewRevisionId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


{-| If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
-}
revisionOf : SelectionSet decodesTo Taco.Object.NodeWithRevisionsToContentNodeConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
revisionOf object____ =
      Object.selectionForCompositeField "revisionOf" [] (object____) (identity >> Decode.nullable)


type alias RevisionsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.PageToRevisionConnectionWhereArgs }

{-| Connection between the page type and the page type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
revisions : (RevisionsOptionalArguments -> RevisionsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.PageToRevisionConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
revisions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodePageToRevisionConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "revisions" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
-}
slug : SelectionSet (Maybe String) Taco.Object.Page
slug =
      Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)


{-| The current status of the object
-}
status : SelectionSet (Maybe String) Taco.Object.Page
status =
      Object.selectionForField "(Maybe String)" "status" [] (Decode.string |> Decode.nullable)


{-| The template assigned to a node of content
-}
template : SelectionSet decodesTo Taco.Interface.ContentTemplate
 -> SelectionSet (Maybe decodesTo) Taco.Object.Page
template object____ =
      Object.selectionForCompositeField "template" [] (object____) (identity >> Decode.nullable)


type alias TitleOptionalArguments = { format : OptionalArgument Taco.Enum.PostObjectFieldFormatEnum.PostObjectFieldFormatEnum }

{-| The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.

  - format - Format of the field output

-}
title : (TitleOptionalArguments -> TitleOptionalArguments)
 -> SelectionSet (Maybe String) Taco.Object.Page
title fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { format = Absent }

        optionalArgs____ =
            [ Argument.optional "format" filledInOptionals____.format ((Encode.enum Taco.Enum.PostObjectFieldFormatEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForField "(Maybe String)" "title" optionalArgs____ (Decode.string |> Decode.nullable)


{-| URI path for the resource
-}
uri : SelectionSet String Taco.Object.Page
uri =
      Object.selectionForField "String" "uri" [] (Decode.string)
