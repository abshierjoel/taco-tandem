-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Object.UpdateCommentPayload exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)

{-| 
-}
clientMutationId : SelectionSet (Maybe String) Taco.Object.UpdateCommentPayload
clientMutationId =
      Object.selectionForField "(Maybe String)" "clientMutationId" [] (Decode.string |> Decode.nullable)


{-| The comment that was created
-}
comment : SelectionSet decodesTo Taco.Object.Comment
 -> SelectionSet (Maybe decodesTo) Taco.Object.UpdateCommentPayload
comment object____ =
      Object.selectionForCompositeField "comment" [] (object____) (identity >> Decode.nullable)


{-| Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
-}
success : SelectionSet (Maybe Bool) Taco.Object.UpdateCommentPayload
success =
      Object.selectionForField "(Maybe Bool)" "success" [] (Decode.bool |> Decode.nullable)
