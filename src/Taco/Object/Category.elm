-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Object.Category exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)

type alias AncestorsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
ancestors : (AncestorsOptionalArguments -> AncestorsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.CategoryToAncestorsCategoryConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
ancestors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "ancestors" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The id field matches the WP_Post-&gt;ID field.
-}
categoryId : SelectionSet (Maybe Int) Taco.Object.Category
categoryId =
      Object.selectionForField "(Maybe Int)" "categoryId" [] (Decode.int |> Decode.nullable)


type alias ChildrenOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.CategoryToCategoryConnectionWhereArgs }

{-| Connection between the category type and the category type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
children : (ChildrenOptionalArguments -> ChildrenOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.CategoryToCategoryConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
children fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeCategoryToCategoryConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "children" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ContentNodesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.CategoryToContentNodeConnectionWhereArgs }

{-| Connection between the category type and the ContentNode type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
contentNodes : (ContentNodesOptionalArguments -> ContentNodesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.CategoryToContentNodeConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
contentNodes fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeCategoryToContentNodeConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "contentNodes" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The number of objects connected to the object
-}
count : SelectionSet (Maybe Int) Taco.Object.Category
count =
      Object.selectionForField "(Maybe Int)" "count" [] (Decode.int |> Decode.nullable)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet Int Taco.Object.Category
databaseId =
      Object.selectionForField "Int" "databaseId" [] (Decode.int)


{-| The description of the object
-}
description : SelectionSet (Maybe String) Taco.Object.Category
description =
      Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


type alias EnqueuedScriptsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the TermNode type and the EnqueuedScript type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedScripts : (EnqueuedScriptsOptionalArguments -> EnqueuedScriptsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.TermNodeToEnqueuedScriptConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
enqueuedScripts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedScripts" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias EnqueuedStylesheetsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the TermNode type and the EnqueuedStylesheet type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
enqueuedStylesheets : (EnqueuedStylesheetsOptionalArguments -> EnqueuedStylesheetsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.TermNodeToEnqueuedStylesheetConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
enqueuedStylesheets fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "enqueuedStylesheets" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| The globally unique ID for the object
-}
id : SelectionSet Taco.ScalarCodecs.Id Taco.Object.Category
id =
      Object.selectionForField "ScalarCodecs.Id" "id" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether the object is restricted from the current viewer
-}
isRestricted : SelectionSet (Maybe Bool) Taco.Object.Category
isRestricted =
      Object.selectionForField "(Maybe Bool)" "isRestricted" [] (Decode.bool |> Decode.nullable)


{-| The link to the term
-}
link : SelectionSet (Maybe String) Taco.Object.Category
link =
      Object.selectionForField "(Maybe String)" "link" [] (Decode.string |> Decode.nullable)


{-| The human friendly name of the object.
-}
name : SelectionSet (Maybe String) Taco.Object.Category
name =
      Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


{-| Connection between the category type and the category type
-}
parent : SelectionSet decodesTo Taco.Object.CategoryToParentCategoryConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
parent object____ =
      Object.selectionForCompositeField "parent" [] (object____) (identity >> Decode.nullable)


{-| Database id of the parent node
-}
parentDatabaseId : SelectionSet (Maybe Int) Taco.Object.Category
parentDatabaseId =
      Object.selectionForField "(Maybe Int)" "parentDatabaseId" [] (Decode.int |> Decode.nullable)


{-| The globally unique identifier of the parent node.
-}
parentId : SelectionSet (Maybe Taco.ScalarCodecs.Id) Taco.Object.Category
parentId =
      Object.selectionForField "(Maybe ScalarCodecs.Id)" "parentId" [] (Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


type alias PostsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.CategoryToPostConnectionWhereArgs }

{-| Connection between the category type and the post type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
posts : (PostsOptionalArguments -> PostsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.CategoryToPostConnection
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
posts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeCategoryToPostConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "posts" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| An alphanumeric identifier for the object unique to its type.
-}
slug : SelectionSet (Maybe String) Taco.Object.Category
slug =
      Object.selectionForField "(Maybe String)" "slug" [] (Decode.string |> Decode.nullable)


{-| Connection between the category type and the Taxonomy type
-}
taxonomy : SelectionSet decodesTo Taco.Object.CategoryToTaxonomyConnectionEdge
 -> SelectionSet (Maybe decodesTo) Taco.Object.Category
taxonomy object____ =
      Object.selectionForCompositeField "taxonomy" [] (object____) (identity >> Decode.nullable)


{-| The ID of the term group that this term object belongs to
-}
termGroupId : SelectionSet (Maybe Int) Taco.Object.Category
termGroupId =
      Object.selectionForField "(Maybe Int)" "termGroupId" [] (Decode.int |> Decode.nullable)


{-| The taxonomy ID that the object is associated with
-}
termTaxonomyId : SelectionSet (Maybe Int) Taco.Object.Category
termTaxonomyId =
      Object.selectionForField "(Maybe Int)" "termTaxonomyId" [] (Decode.int |> Decode.nullable)


{-| The unique resource identifier path
-}
uri : SelectionSet String Taco.Object.Category
uri =
      Object.selectionForField "String" "uri" [] (Decode.string)
