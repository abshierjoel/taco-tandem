-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Enum.AvatarRatingEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option
-}
type AvatarRatingEnum
    = G
    | Pg
    | R
    | X
list : List AvatarRatingEnum
list =
    [G, Pg, R, X]
decoder : Decoder AvatarRatingEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "G" ->
                        Decode.succeed G

                    "PG" ->
                        Decode.succeed Pg

                    "R" ->
                        Decode.succeed R

                    "X" ->
                        Decode.succeed X

                    _ ->
                        Decode.fail ("Invalid AvatarRatingEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : AvatarRatingEnum -> String
toString enum____ =
    case enum____ of
        G ->
                "G"


        Pg ->
                "PG"


        R ->
                "R"


        X ->
                "X"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe AvatarRatingEnum
fromString enumString____ =
    case enumString____ of
        "G" ->
                Just G


        "PG" ->
                Just Pg


        "R" ->
                Just R


        "X" ->
                Just X

        _ ->
                Nothing
