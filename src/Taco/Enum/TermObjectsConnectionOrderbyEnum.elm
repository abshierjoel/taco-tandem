-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Enum.TermObjectsConnectionOrderbyEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Options for ordering the connection by
-}
type TermObjectsConnectionOrderbyEnum
    = Count
    | Description
    | Name
    | Slug
    | TermGroup
    | TermId
    | TermOrder
list : List TermObjectsConnectionOrderbyEnum
list =
    [Count, Description, Name, Slug, TermGroup, TermId, TermOrder]
decoder : Decoder TermObjectsConnectionOrderbyEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "COUNT" ->
                        Decode.succeed Count

                    "DESCRIPTION" ->
                        Decode.succeed Description

                    "NAME" ->
                        Decode.succeed Name

                    "SLUG" ->
                        Decode.succeed Slug

                    "TERM_GROUP" ->
                        Decode.succeed TermGroup

                    "TERM_ID" ->
                        Decode.succeed TermId

                    "TERM_ORDER" ->
                        Decode.succeed TermOrder

                    _ ->
                        Decode.fail ("Invalid TermObjectsConnectionOrderbyEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TermObjectsConnectionOrderbyEnum -> String
toString enum____ =
    case enum____ of
        Count ->
                "COUNT"


        Description ->
                "DESCRIPTION"


        Name ->
                "NAME"


        Slug ->
                "SLUG"


        TermGroup ->
                "TERM_GROUP"


        TermId ->
                "TERM_ID"


        TermOrder ->
                "TERM_ORDER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TermObjectsConnectionOrderbyEnum
fromString enumString____ =
    case enumString____ of
        "COUNT" ->
                Just Count


        "DESCRIPTION" ->
                Just Description


        "NAME" ->
                Just Name


        "SLUG" ->
                Just Slug


        "TERM_GROUP" ->
                Just TermGroup


        "TERM_ID" ->
                Just TermId


        "TERM_ORDER" ->
                Just TermOrder

        _ ->
                Nothing
