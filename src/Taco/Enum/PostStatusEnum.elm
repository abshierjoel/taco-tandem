-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Enum.PostStatusEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The status of the object.

  - AutoDraft - Objects with the auto-draft status
  - Draft - Objects with the draft status
  - Future - Objects with the future status
  - Inherit - Objects with the inherit status
  - Pending - Objects with the pending status
  - Private - Objects with the private status
  - Publish - Objects with the publish status
  - RequestCompleted - Objects with the request-completed status
  - RequestConfirmed - Objects with the request-confirmed status
  - RequestFailed - Objects with the request-failed status
  - RequestPending - Objects with the request-pending status
  - Trash - Objects with the trash status

-}
type PostStatusEnum
    = AutoDraft
    | Draft
    | Future
    | Inherit
    | Pending
    | Private
    | Publish
    | RequestCompleted
    | RequestConfirmed
    | RequestFailed
    | RequestPending
    | Trash
list : List PostStatusEnum
list =
    [AutoDraft, Draft, Future, Inherit, Pending, Private, Publish, RequestCompleted, RequestConfirmed, RequestFailed, RequestPending, Trash]
decoder : Decoder PostStatusEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "AUTO_DRAFT" ->
                        Decode.succeed AutoDraft

                    "DRAFT" ->
                        Decode.succeed Draft

                    "FUTURE" ->
                        Decode.succeed Future

                    "INHERIT" ->
                        Decode.succeed Inherit

                    "PENDING" ->
                        Decode.succeed Pending

                    "PRIVATE" ->
                        Decode.succeed Private

                    "PUBLISH" ->
                        Decode.succeed Publish

                    "REQUEST_COMPLETED" ->
                        Decode.succeed RequestCompleted

                    "REQUEST_CONFIRMED" ->
                        Decode.succeed RequestConfirmed

                    "REQUEST_FAILED" ->
                        Decode.succeed RequestFailed

                    "REQUEST_PENDING" ->
                        Decode.succeed RequestPending

                    "TRASH" ->
                        Decode.succeed Trash

                    _ ->
                        Decode.fail ("Invalid PostStatusEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PostStatusEnum -> String
toString enum____ =
    case enum____ of
        AutoDraft ->
                "AUTO_DRAFT"


        Draft ->
                "DRAFT"


        Future ->
                "FUTURE"


        Inherit ->
                "INHERIT"


        Pending ->
                "PENDING"


        Private ->
                "PRIVATE"


        Publish ->
                "PUBLISH"


        RequestCompleted ->
                "REQUEST_COMPLETED"


        RequestConfirmed ->
                "REQUEST_CONFIRMED"


        RequestFailed ->
                "REQUEST_FAILED"


        RequestPending ->
                "REQUEST_PENDING"


        Trash ->
                "TRASH"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PostStatusEnum
fromString enumString____ =
    case enumString____ of
        "AUTO_DRAFT" ->
                Just AutoDraft


        "DRAFT" ->
                Just Draft


        "FUTURE" ->
                Just Future


        "INHERIT" ->
                Just Inherit


        "PENDING" ->
                Just Pending


        "PRIVATE" ->
                Just Private


        "PUBLISH" ->
                Just Publish


        "REQUEST_COMPLETED" ->
                Just RequestCompleted


        "REQUEST_CONFIRMED" ->
                Just RequestConfirmed


        "REQUEST_FAILED" ->
                Just RequestFailed


        "REQUEST_PENDING" ->
                Just RequestPending


        "TRASH" ->
                Just Trash

        _ ->
                Nothing
