-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Enum.UsersConnectionOrderbyEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Field to order the connection by

  - DisplayName - Order by display name
  - Email - Order by email address
  - Login - Order by login
  - LoginIn - Preserve the login order given in the LOGIN_IN array
  - NiceName - Order by nice name
  - NiceNameIn - Preserve the nice name order given in the NICE_NAME_IN array
  - Registered - Order by registration date
  - Url - Order by URL

-}
type UsersConnectionOrderbyEnum
    = DisplayName
    | Email
    | Login
    | LoginIn
    | NiceName
    | NiceNameIn
    | Registered
    | Url
list : List UsersConnectionOrderbyEnum
list =
    [DisplayName, Email, Login, LoginIn, NiceName, NiceNameIn, Registered, Url]
decoder : Decoder UsersConnectionOrderbyEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DISPLAY_NAME" ->
                        Decode.succeed DisplayName

                    "EMAIL" ->
                        Decode.succeed Email

                    "LOGIN" ->
                        Decode.succeed Login

                    "LOGIN_IN" ->
                        Decode.succeed LoginIn

                    "NICE_NAME" ->
                        Decode.succeed NiceName

                    "NICE_NAME_IN" ->
                        Decode.succeed NiceNameIn

                    "REGISTERED" ->
                        Decode.succeed Registered

                    "URL" ->
                        Decode.succeed Url

                    _ ->
                        Decode.fail ("Invalid UsersConnectionOrderbyEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UsersConnectionOrderbyEnum -> String
toString enum____ =
    case enum____ of
        DisplayName ->
                "DISPLAY_NAME"


        Email ->
                "EMAIL"


        Login ->
                "LOGIN"


        LoginIn ->
                "LOGIN_IN"


        NiceName ->
                "NICE_NAME"


        NiceNameIn ->
                "NICE_NAME_IN"


        Registered ->
                "REGISTERED"


        Url ->
                "URL"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UsersConnectionOrderbyEnum
fromString enumString____ =
    case enumString____ of
        "DISPLAY_NAME" ->
                Just DisplayName


        "EMAIL" ->
                Just Email


        "LOGIN" ->
                Just Login


        "LOGIN_IN" ->
                Just LoginIn


        "NICE_NAME" ->
                Just NiceName


        "NICE_NAME_IN" ->
                Just NiceNameIn


        "REGISTERED" ->
                Just Registered


        "URL" ->
                Just Url

        _ ->
                Nothing
