-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Enum.CommentsConnectionOrderbyEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Options for ordering the connection
-}
type CommentsConnectionOrderbyEnum
    = CommentAgent
    | CommentApproved
    | CommentAuthor
    | CommentAuthorEmail
    | CommentAuthorIp
    | CommentAuthorUrl
    | CommentContent
    | CommentDate
    | CommentDateGmt
    | CommentId
    | CommentIn
    | CommentKarma
    | CommentParent
    | CommentPostId
    | CommentType
    | UserId
list : List CommentsConnectionOrderbyEnum
list =
    [CommentAgent, CommentApproved, CommentAuthor, CommentAuthorEmail, CommentAuthorIp, CommentAuthorUrl, CommentContent, CommentDate, CommentDateGmt, CommentId, CommentIn, CommentKarma, CommentParent, CommentPostId, CommentType, UserId]
decoder : Decoder CommentsConnectionOrderbyEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "COMMENT_AGENT" ->
                        Decode.succeed CommentAgent

                    "COMMENT_APPROVED" ->
                        Decode.succeed CommentApproved

                    "COMMENT_AUTHOR" ->
                        Decode.succeed CommentAuthor

                    "COMMENT_AUTHOR_EMAIL" ->
                        Decode.succeed CommentAuthorEmail

                    "COMMENT_AUTHOR_IP" ->
                        Decode.succeed CommentAuthorIp

                    "COMMENT_AUTHOR_URL" ->
                        Decode.succeed CommentAuthorUrl

                    "COMMENT_CONTENT" ->
                        Decode.succeed CommentContent

                    "COMMENT_DATE" ->
                        Decode.succeed CommentDate

                    "COMMENT_DATE_GMT" ->
                        Decode.succeed CommentDateGmt

                    "COMMENT_ID" ->
                        Decode.succeed CommentId

                    "COMMENT_IN" ->
                        Decode.succeed CommentIn

                    "COMMENT_KARMA" ->
                        Decode.succeed CommentKarma

                    "COMMENT_PARENT" ->
                        Decode.succeed CommentParent

                    "COMMENT_POST_ID" ->
                        Decode.succeed CommentPostId

                    "COMMENT_TYPE" ->
                        Decode.succeed CommentType

                    "USER_ID" ->
                        Decode.succeed UserId

                    _ ->
                        Decode.fail ("Invalid CommentsConnectionOrderbyEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CommentsConnectionOrderbyEnum -> String
toString enum____ =
    case enum____ of
        CommentAgent ->
                "COMMENT_AGENT"


        CommentApproved ->
                "COMMENT_APPROVED"


        CommentAuthor ->
                "COMMENT_AUTHOR"


        CommentAuthorEmail ->
                "COMMENT_AUTHOR_EMAIL"


        CommentAuthorIp ->
                "COMMENT_AUTHOR_IP"


        CommentAuthorUrl ->
                "COMMENT_AUTHOR_URL"


        CommentContent ->
                "COMMENT_CONTENT"


        CommentDate ->
                "COMMENT_DATE"


        CommentDateGmt ->
                "COMMENT_DATE_GMT"


        CommentId ->
                "COMMENT_ID"


        CommentIn ->
                "COMMENT_IN"


        CommentKarma ->
                "COMMENT_KARMA"


        CommentParent ->
                "COMMENT_PARENT"


        CommentPostId ->
                "COMMENT_POST_ID"


        CommentType ->
                "COMMENT_TYPE"


        UserId ->
                "USER_ID"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CommentsConnectionOrderbyEnum
fromString enumString____ =
    case enumString____ of
        "COMMENT_AGENT" ->
                Just CommentAgent


        "COMMENT_APPROVED" ->
                Just CommentApproved


        "COMMENT_AUTHOR" ->
                Just CommentAuthor


        "COMMENT_AUTHOR_EMAIL" ->
                Just CommentAuthorEmail


        "COMMENT_AUTHOR_IP" ->
                Just CommentAuthorIp


        "COMMENT_AUTHOR_URL" ->
                Just CommentAuthorUrl


        "COMMENT_CONTENT" ->
                Just CommentContent


        "COMMENT_DATE" ->
                Just CommentDate


        "COMMENT_DATE_GMT" ->
                Just CommentDateGmt


        "COMMENT_ID" ->
                Just CommentId


        "COMMENT_IN" ->
                Just CommentIn


        "COMMENT_KARMA" ->
                Just CommentKarma


        "COMMENT_PARENT" ->
                Just CommentParent


        "COMMENT_POST_ID" ->
                Just CommentPostId


        "COMMENT_TYPE" ->
                Just CommentType


        "USER_ID" ->
                Just UserId

        _ ->
                Nothing
