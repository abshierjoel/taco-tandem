-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Enum.PostObjectFieldFormatEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The format of post field data.

  - Raw - Provide the field value directly from database
  - Rendered - Apply the default WordPress rendering

-}
type PostObjectFieldFormatEnum
    = Raw
    | Rendered
list : List PostObjectFieldFormatEnum
list =
    [Raw, Rendered]
decoder : Decoder PostObjectFieldFormatEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "RAW" ->
                        Decode.succeed Raw

                    "RENDERED" ->
                        Decode.succeed Rendered

                    _ ->
                        Decode.fail ("Invalid PostObjectFieldFormatEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
        )
        

{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PostObjectFieldFormatEnum -> String
toString enum____ =
    case enum____ of
        Raw ->
                "RAW"


        Rendered ->
                "RENDERED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PostObjectFieldFormatEnum
fromString enumString____ =
    case enumString____ of
        "RAW" ->
                Just Raw


        "RENDERED" ->
                Just Rendered

        _ ->
                Nothing
