-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Taco.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Taco.Object
import Taco.Interface
import Taco.Union
import Taco.Scalar
import Taco.InputObject
import Taco.ScalarCodecs
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)
import Taco.Enum.CategoryIdType
import Taco.Enum.ContentNodeIdTypeEnum
import Taco.Enum.ContentTypeEnum
import Taco.Enum.ContentTypeIdTypeEnum
import Taco.Enum.MediaItemIdType
import Taco.Enum.MenuNodeIdTypeEnum
import Taco.Enum.MenuItemNodeIdTypeEnum
import Taco.Enum.PageIdType
import Taco.Enum.PostIdType
import Taco.Enum.PostFormatIdType
import Taco.Enum.TagIdType
import Taco.Enum.TaxonomyIdTypeEnum
import Taco.Enum.TermNodeIdTypeEnum
import Taco.Enum.TaxonomyEnum
import Taco.Enum.UserNodeIdTypeEnum
{-| Entry point to get all settings for the site
-}
allSettings : SelectionSet decodesTo Taco.Object.Settings
 -> SelectionSet (Maybe decodesTo) RootQuery
allSettings object____ =
      Object.selectionForCompositeField "allSettings" [] (object____) (identity >> Decode.nullable)


type alias CategoriesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToCategoryConnectionWhereArgs }

{-| Connection between the RootQuery type and the category type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
categories : (CategoriesOptionalArguments -> CategoriesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToCategoryConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
categories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToCategoryConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "categories" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias CategoryOptionalArguments = { idType : OptionalArgument Taco.Enum.CategoryIdType.CategoryIdType }

type alias CategoryRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A 0bject
-}
category : (CategoryOptionalArguments -> CategoryOptionalArguments)
 -> CategoryRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Category
 -> SelectionSet (Maybe decodesTo) RootQuery
category fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.CategoryIdType.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "category" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias CommentRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| Returns a Comment
-}
comment : CommentRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Comment
 -> SelectionSet (Maybe decodesTo) RootQuery
comment requiredArgs____ object____ =
      Object.selectionForCompositeField "comment" [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ] (object____) (identity >> Decode.nullable)


type alias CommentsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToCommentConnectionWhereArgs }

{-| Connection between the RootQuery type and the Comment type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
comments : (CommentsOptionalArguments -> CommentsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToCommentConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToCommentConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "comments" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ContentNodeOptionalArguments = { idType : OptionalArgument Taco.Enum.ContentNodeIdTypeEnum.ContentNodeIdTypeEnum
 , contentType : OptionalArgument Taco.Enum.ContentTypeEnum.ContentTypeEnum
 , asPreview : OptionalArgument Bool }

type alias ContentNodeRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A node used to manage content

  - idType - Type of unique identifier to fetch a content node by. Default is Global ID
  - contentType - The content type the node is used for. Required when idType is set to "name" or "slug"
  - asPreview - Whether to return the node as a preview instance

-}
contentNode : (ContentNodeOptionalArguments -> ContentNodeOptionalArguments)
 -> ContentNodeRequiredArguments
 -> SelectionSet decodesTo Taco.Interface.ContentNode
 -> SelectionSet (Maybe decodesTo) RootQuery
contentNode fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent, contentType = Absent, asPreview = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.ContentNodeIdTypeEnum.toString)), Argument.optional "contentType" filledInOptionals____.contentType ((Encode.enum Taco.Enum.ContentTypeEnum.toString)), Argument.optional "asPreview" filledInOptionals____.asPreview (Encode.bool) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "contentNode" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias ContentNodesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToContentNodeConnectionWhereArgs }

{-| Connection between the RootQuery type and the ContentNode type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
contentNodes : (ContentNodesOptionalArguments -> ContentNodesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToContentNodeConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
contentNodes fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToContentNodeConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "contentNodes" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ContentTypeOptionalArguments = { idType : OptionalArgument Taco.Enum.ContentTypeIdTypeEnum.ContentTypeIdTypeEnum }

type alias ContentTypeRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| Fetch a Content Type node by unique Identifier

  - id - Unique Identifier for the Content Type node
  - idType - The type of Identifier used in the ID field

-}
contentType : (ContentTypeOptionalArguments -> ContentTypeOptionalArguments)
 -> ContentTypeRequiredArguments
 -> SelectionSet decodesTo Taco.Object.ContentType
 -> SelectionSet (Maybe decodesTo) RootQuery
contentType fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.ContentTypeIdTypeEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "contentType" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias ContentTypesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the ContentType type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
contentTypes : (ContentTypesOptionalArguments -> ContentTypesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToContentTypeConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
contentTypes fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "contentTypes" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| 
-}
discussionSettings : SelectionSet decodesTo Taco.Object.DiscussionSettings
 -> SelectionSet (Maybe decodesTo) RootQuery
discussionSettings object____ =
      Object.selectionForCompositeField "discussionSettings" [] (object____) (identity >> Decode.nullable)


{-| 
-}
generalSettings : SelectionSet decodesTo Taco.Object.GeneralSettings
 -> SelectionSet (Maybe decodesTo) RootQuery
generalSettings object____ =
      Object.selectionForCompositeField "generalSettings" [] (object____) (identity >> Decode.nullable)


type alias MediaItemOptionalArguments = { idType : OptionalArgument Taco.Enum.MediaItemIdType.MediaItemIdType
 , asPreview : OptionalArgument Bool }

type alias MediaItemRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| An object of the mediaItem Type. 

  - asPreview - Whether to return the node as a preview instance

-}
mediaItem : (MediaItemOptionalArguments -> MediaItemOptionalArguments)
 -> MediaItemRequiredArguments
 -> SelectionSet decodesTo Taco.Object.MediaItem
 -> SelectionSet (Maybe decodesTo) RootQuery
mediaItem fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent, asPreview = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.MediaItemIdType.toString)), Argument.optional "asPreview" filledInOptionals____.asPreview (Encode.bool) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "mediaItem" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias MediaItemByOptionalArguments = { id : OptionalArgument Taco.ScalarCodecs.Id
 , mediaItemId : OptionalArgument Int
 , uri : OptionalArgument String
 , slug : OptionalArgument String }

{-| A mediaItem object

  - id - Get the object by its global ID
  - mediaItemId - Get the mediaItem by its database ID
  - uri - Get the mediaItem by its uri
  - slug - Get the mediaItem by its slug (only available for non-hierarchical types)

-}
mediaItemBy : (MediaItemByOptionalArguments -> MediaItemByOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.MediaItem
 -> SelectionSet (Maybe decodesTo) RootQuery
mediaItemBy fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, mediaItemId = Absent, uri = Absent, slug = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)), Argument.optional "mediaItemId" filledInOptionals____.mediaItemId (Encode.int), Argument.optional "uri" filledInOptionals____.uri (Encode.string), Argument.optional "slug" filledInOptionals____.slug (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "mediaItemBy" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias MediaItemsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToMediaItemConnectionWhereArgs }

{-| Connection between the RootQuery type and the mediaItem type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
mediaItems : (MediaItemsOptionalArguments -> MediaItemsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToMediaItemConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
mediaItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToMediaItemConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "mediaItems" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias MenuOptionalArguments = { idType : OptionalArgument Taco.Enum.MenuNodeIdTypeEnum.MenuNodeIdTypeEnum }

type alias MenuRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A WordPress navigation menu
-}
menu : (MenuOptionalArguments -> MenuOptionalArguments)
 -> MenuRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Menu
 -> SelectionSet (Maybe decodesTo) RootQuery
menu fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.MenuNodeIdTypeEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "menu" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias MenuItemOptionalArguments = { idType : OptionalArgument Taco.Enum.MenuItemNodeIdTypeEnum.MenuItemNodeIdTypeEnum }

type alias MenuItemRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A WordPress navigation menu item
-}
menuItem : (MenuItemOptionalArguments -> MenuItemOptionalArguments)
 -> MenuItemRequiredArguments
 -> SelectionSet decodesTo Taco.Object.MenuItem
 -> SelectionSet (Maybe decodesTo) RootQuery
menuItem fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.MenuItemNodeIdTypeEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "menuItem" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias MenuItemsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToMenuItemConnectionWhereArgs }

{-| Connection between the RootQuery type and the MenuItem type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
menuItems : (MenuItemsOptionalArguments -> MenuItemsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToMenuItemConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
menuItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToMenuItemConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "menuItems" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias MenusOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToMenuConnectionWhereArgs }

{-| Connection between the RootQuery type and the Menu type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
menus : (MenusOptionalArguments -> MenusOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToMenuConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
menus fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToMenuConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "menus" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias NodeOptionalArguments = { id : OptionalArgument Taco.ScalarCodecs.Id }

{-| Fetches an object given its ID

  - id - The unique identifier of the node

-}
node : (NodeOptionalArguments -> NodeOptionalArguments)
 -> SelectionSet decodesTo Taco.Interface.Node
 -> SelectionSet (Maybe decodesTo) RootQuery
node fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "node" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias NodeByUriRequiredArguments = { uri : String }

{-| 

  - uri - Unique Resource Identifier in the form of a path or permalink for a node. Ex: "/hello-world"

-}
nodeByUri : NodeByUriRequiredArguments
 -> SelectionSet decodesTo Taco.Interface.UniformResourceIdentifiable
 -> SelectionSet (Maybe decodesTo) RootQuery
nodeByUri requiredArgs____ object____ =
      Object.selectionForCompositeField "nodeByUri" [ Argument.required "uri" requiredArgs____.uri (Encode.string) ] (object____) (identity >> Decode.nullable)


type alias PageOptionalArguments = { idType : OptionalArgument Taco.Enum.PageIdType.PageIdType
 , asPreview : OptionalArgument Bool }

type alias PageRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| An object of the page Type. 

  - asPreview - Whether to return the node as a preview instance

-}
page : (PageOptionalArguments -> PageOptionalArguments)
 -> PageRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Page
 -> SelectionSet (Maybe decodesTo) RootQuery
page fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent, asPreview = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.PageIdType.toString)), Argument.optional "asPreview" filledInOptionals____.asPreview (Encode.bool) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "page" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias PageByOptionalArguments = { id : OptionalArgument Taco.ScalarCodecs.Id
 , pageId : OptionalArgument Int
 , uri : OptionalArgument String }

{-| A page object

  - id - Get the object by its global ID
  - pageId - Get the page by its database ID
  - uri - Get the page by its uri

-}
pageBy : (PageByOptionalArguments -> PageByOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.Page
 -> SelectionSet (Maybe decodesTo) RootQuery
pageBy fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, pageId = Absent, uri = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)), Argument.optional "pageId" filledInOptionals____.pageId (Encode.int), Argument.optional "uri" filledInOptionals____.uri (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "pageBy" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias PagesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToPageConnectionWhereArgs }

{-| Connection between the RootQuery type and the page type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
pages : (PagesOptionalArguments -> PagesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToPageConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
pages fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToPageConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "pages" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias PluginRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A WordPress plugin
-}
plugin : PluginRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Plugin
 -> SelectionSet (Maybe decodesTo) RootQuery
plugin requiredArgs____ object____ =
      Object.selectionForCompositeField "plugin" [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ] (object____) (identity >> Decode.nullable)


type alias PluginsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the Plugin type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
plugins : (PluginsOptionalArguments -> PluginsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToPluginConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
plugins fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "plugins" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias PostOptionalArguments = { idType : OptionalArgument Taco.Enum.PostIdType.PostIdType
 , asPreview : OptionalArgument Bool }

type alias PostRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| An object of the post Type. 

  - asPreview - Whether to return the node as a preview instance

-}
post : (PostOptionalArguments -> PostOptionalArguments)
 -> PostRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Post
 -> SelectionSet (Maybe decodesTo) RootQuery
post fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent, asPreview = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.PostIdType.toString)), Argument.optional "asPreview" filledInOptionals____.asPreview (Encode.bool) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "post" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias PostByOptionalArguments = { id : OptionalArgument Taco.ScalarCodecs.Id
 , postId : OptionalArgument Int
 , uri : OptionalArgument String
 , slug : OptionalArgument String }

{-| A post object

  - id - Get the object by its global ID
  - postId - Get the post by its database ID
  - uri - Get the post by its uri
  - slug - Get the post by its slug (only available for non-hierarchical types)

-}
postBy : (PostByOptionalArguments -> PostByOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.Post
 -> SelectionSet (Maybe decodesTo) RootQuery
postBy fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, postId = Absent, uri = Absent, slug = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)), Argument.optional "postId" filledInOptionals____.postId (Encode.int), Argument.optional "uri" filledInOptionals____.uri (Encode.string), Argument.optional "slug" filledInOptionals____.slug (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "postBy" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias PostFormatOptionalArguments = { idType : OptionalArgument Taco.Enum.PostFormatIdType.PostFormatIdType }

type alias PostFormatRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A 0bject
-}
postFormat : (PostFormatOptionalArguments -> PostFormatOptionalArguments)
 -> PostFormatRequiredArguments
 -> SelectionSet decodesTo Taco.Object.PostFormat
 -> SelectionSet (Maybe decodesTo) RootQuery
postFormat fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.PostFormatIdType.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "postFormat" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias PostFormatsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToPostFormatConnectionWhereArgs }

{-| Connection between the RootQuery type and the postFormat type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
postFormats : (PostFormatsOptionalArguments -> PostFormatsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToPostFormatConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
postFormats fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToPostFormatConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "postFormats" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias PostsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToPostConnectionWhereArgs }

{-| Connection between the RootQuery type and the post type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
posts : (PostsOptionalArguments -> PostsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToPostConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
posts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToPostConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "posts" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| 
-}
readingSettings : SelectionSet decodesTo Taco.Object.ReadingSettings
 -> SelectionSet (Maybe decodesTo) RootQuery
readingSettings object____ =
      Object.selectionForCompositeField "readingSettings" [] (object____) (identity >> Decode.nullable)


type alias RegisteredScriptsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the EnqueuedScript type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
registeredScripts : (RegisteredScriptsOptionalArguments -> RegisteredScriptsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToEnqueuedScriptConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
registeredScripts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "registeredScripts" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias RegisteredStylesheetsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the EnqueuedStylesheet type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
registeredStylesheets : (RegisteredStylesheetsOptionalArguments -> RegisteredStylesheetsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToEnqueuedStylesheetConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
registeredStylesheets fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "registeredStylesheets" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias RevisionsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToContentRevisionUnionConnectionWhereArgs }

{-| Connection between the RootQuery type and the ContentRevisionUnion type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
revisions : (RevisionsOptionalArguments -> RevisionsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToContentRevisionUnionConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
revisions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToContentRevisionUnionConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "revisions" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias TagOptionalArguments = { idType : OptionalArgument Taco.Enum.TagIdType.TagIdType }

type alias TagRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A 0bject
-}
tag : (TagOptionalArguments -> TagOptionalArguments)
 -> TagRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Tag
 -> SelectionSet (Maybe decodesTo) RootQuery
tag fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.TagIdType.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "tag" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias TagsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToTagConnectionWhereArgs }

{-| Connection between the RootQuery type and the tag type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
tags : (TagsOptionalArguments -> TagsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToTagConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
tags fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToTagConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "tags" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias TaxonomiesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the Taxonomy type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
taxonomies : (TaxonomiesOptionalArguments -> TaxonomiesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToTaxonomyConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
taxonomies fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "taxonomies" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias TaxonomyOptionalArguments = { idType : OptionalArgument Taco.Enum.TaxonomyIdTypeEnum.TaxonomyIdTypeEnum }

type alias TaxonomyRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| Fetch a Taxonomy node by unique Identifier

  - id - Unique Identifier for the Taxonomy node
  - idType - The type of Identifier used in the ID field

-}
taxonomy : (TaxonomyOptionalArguments -> TaxonomyOptionalArguments)
 -> TaxonomyRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Taxonomy
 -> SelectionSet (Maybe decodesTo) RootQuery
taxonomy fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.TaxonomyIdTypeEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "taxonomy" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias TermNodeOptionalArguments = { idType : OptionalArgument Taco.Enum.TermNodeIdTypeEnum.TermNodeIdTypeEnum
 , taxonomy : OptionalArgument Taco.Enum.TaxonomyEnum.TaxonomyEnum }

type alias TermNodeRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A node in a taxonomy used to group and relate content nodes

  - idType - Type of unique identifier to fetch a term node by. Default is Global ID
  - taxonomy - The taxonomy of the tern node. Required when idType is set to "name" or "slug"

-}
termNode : (TermNodeOptionalArguments -> TermNodeOptionalArguments)
 -> TermNodeRequiredArguments
 -> SelectionSet decodesTo Taco.Interface.TermNode
 -> SelectionSet (Maybe decodesTo) RootQuery
termNode fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent, taxonomy = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.TermNodeIdTypeEnum.toString)), Argument.optional "taxonomy" filledInOptionals____.taxonomy ((Encode.enum Taco.Enum.TaxonomyEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "termNode" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias TermsOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToTermNodeConnectionWhereArgs }

{-| Connection between the RootQuery type and the TermNode type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
terms : (TermsOptionalArguments -> TermsOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToTermNodeConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
terms fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToTermNodeConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "terms" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias ThemeRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| A Theme object
-}
theme : ThemeRequiredArguments
 -> SelectionSet decodesTo Taco.Object.Theme
 -> SelectionSet (Maybe decodesTo) RootQuery
theme requiredArgs____ object____ =
      Object.selectionForCompositeField "theme" [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ] (object____) (identity >> Decode.nullable)


type alias ThemesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the Theme type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
themes : (ThemesOptionalArguments -> ThemesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToThemeConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
themes fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "themes" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias UserOptionalArguments = { idType : OptionalArgument Taco.Enum.UserNodeIdTypeEnum.UserNodeIdTypeEnum }

type alias UserRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| Returns a user
-}
user : (UserOptionalArguments -> UserOptionalArguments)
 -> UserRequiredArguments
 -> SelectionSet decodesTo Taco.Object.User
 -> SelectionSet (Maybe decodesTo) RootQuery
user fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { idType = Absent }

        optionalArgs____ =
            [ Argument.optional "idType" filledInOptionals____.idType ((Encode.enum Taco.Enum.UserNodeIdTypeEnum.toString)) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "user" (optionalArgs____ ++ [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ]) (object____) (identity >> Decode.nullable)


type alias UserRoleRequiredArguments = { id : Taco.ScalarCodecs.Id }

{-| Returns a user role
-}
userRole : UserRoleRequiredArguments
 -> SelectionSet decodesTo Taco.Object.UserRole
 -> SelectionSet (Maybe decodesTo) RootQuery
userRole requiredArgs____ object____ =
      Object.selectionForCompositeField "userRole" [ Argument.required "id" requiredArgs____.id ((Taco.ScalarCodecs.codecs |> Taco.Scalar.unwrapEncoder .codecId)) ] (object____) (identity >> Decode.nullable)


type alias UserRolesOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String }

{-| Connection between the RootQuery type and the UserRole type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data

-}
userRoles : (UserRolesOptionalArguments -> UserRolesOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToUserRoleConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
userRoles fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "userRoles" optionalArgs____ (object____) (identity >> Decode.nullable)


type alias UsersOptionalArguments = { first : OptionalArgument Int
 , last : OptionalArgument Int
 , after : OptionalArgument String
 , before : OptionalArgument String
 , where_ : OptionalArgument Taco.InputObject.RootQueryToUserConnectionWhereArgs }

{-| Connection between the RootQuery type and the User type

  - first - The number of items to return after the referenced "after" cursor
  - after - Cursor used along with the "first" argument to reference where in the dataset to get data
  - before - Cursor used along with the "last" argument to reference where in the dataset to get data
  - where_ - Arguments for filtering the connection

-}
users : (UsersOptionalArguments -> UsersOptionalArguments)
 -> SelectionSet decodesTo Taco.Object.RootQueryToUserConnection
 -> SelectionSet (Maybe decodesTo) RootQuery
users fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, after = Absent, before = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first (Encode.int), Argument.optional "last" filledInOptionals____.last (Encode.int), Argument.optional "after" filledInOptionals____.after (Encode.string), Argument.optional "before" filledInOptionals____.before (Encode.string), Argument.optional "where" filledInOptionals____.where_ (Taco.InputObject.encodeRootQueryToUserConnectionWhereArgs) ]
                |> List.filterMap identity
    in
      Object.selectionForCompositeField "users" optionalArgs____ (object____) (identity >> Decode.nullable)


{-| Returns the current user
-}
viewer : SelectionSet decodesTo Taco.Object.User
 -> SelectionSet (Maybe decodesTo) RootQuery
viewer object____ =
      Object.selectionForCompositeField "viewer" [] (object____) (identity >> Decode.nullable)


{-| 
-}
writingSettings : SelectionSet decodesTo Taco.Object.WritingSettings
 -> SelectionSet (Maybe decodesTo) RootQuery
writingSettings object____ =
      Object.selectionForCompositeField "writingSettings" [] (object____) (identity >> Decode.nullable)
